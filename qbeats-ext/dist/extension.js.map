{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://qbeats-ext/./src/extension.ts","webpack://qbeats-ext/external commonjs \"vscode\"","webpack://qbeats-ext/external node-commonjs \"fs\"","webpack://qbeats-ext/external node-commonjs \"path\"","webpack://qbeats-ext/webpack/bootstrap","webpack://qbeats-ext/webpack/startup"],"sourcesContent":["// extension.ts\n\nimport * as vscode from \"vscode\";\nimport * as fs from \"fs\";\nimport path from \"path\";\n\nlet decorationType: vscode.TextEditorDecorationType;\n\nconst diagnosticsCollection =\n  vscode.languages.createDiagnosticCollection(\"QuoicouBeats\");\n\nexport function activate(context: vscode.ExtensionContext) {\n  // Inscrire la commande pour lancer l'analyse\n  let disposable = vscode.commands.registerCommand(\n    \"extension.analyzeCode\",\n    () => {\n      analyzeCode();\n    }\n  );\n\n  // Écouter les modifications de texte\n  let changeDisposable = vscode.workspace.onDidChangeTextDocument((e) => {\n    if (e.document === vscode.window.activeTextEditor?.document && e.document.languageId === 'qb') {\n      analyzeCode();\n    }\n  });\n\nvscode.commands.registerCommand(\"extension.openKeyboardHtml\", () => {\n    const editor = vscode.window.activeTextEditor;\n    if (editor) {\n        const fileNameWithoutExtension = editor.document.fileName.replace(\"scenarios\", \"generated\").split(\".\")[0];\n        const filePath = `${fileNameWithoutExtension}-wk.html`;\n        openHtmlKeyboardPage(filePath);\n    }\n});\n\n  context.subscriptions.push(disposable, changeDisposable);\n}\n\nasync function analyzeCode() {\n  const activeEditor = vscode.window.activeTextEditor;\n\n  if (activeEditor) {\n    const document = activeEditor.document;\n    const text = document.getText();\n\n    // Utilisez votre analyseur ou la grammaire tmLanguage.json pour détecter les erreurs\n    const errors = analyzeForErrors(text);\n\n    if (errors.length > 0) {\n      // Afficher les erreurs dans l'éditeur\n      showErrorsInEditor(activeEditor, errors);\n    } else {\n      if (decorationType) {\n        decorationType.dispose();\n      }\n      diagnosticsCollection.clear();\n    }\n  }\n}\n\nfunction analyzeForErrors(text: string): vscode.Diagnostic[] {\n  const diagnostics: vscode.Diagnostic[] = [];\n\n  const missingKeywords = [\"Tempo\", \"TimeSignature\", \"Ticks\"];\n\n  for (const keyword of missingKeywords) {\n    const regex = new RegExp(`\\\\b${keyword}\\\\b`, \"g\");\n    if (!regex.test(text)) {\n      const tracksIndex = text.indexOf(\"Tracks\");\n      const startPosition =\n        vscode.window.activeTextEditor?.document.positionAt(0);\n      const endPosition =\n        vscode.window.activeTextEditor?.document.positionAt(tracksIndex);\n      const range = new vscode.Range(startPosition!, endPosition!);\n      const diagnostic = new vscode.Diagnostic(\n        range,\n        `Le mot-clé ${keyword} est manquant.`,\n        vscode.DiagnosticSeverity.Error\n      );\n      diagnostics.push(diagnostic);\n    }\n  }\n\n  // Trouver tous les blocs \"Track\"\n  const trackBlocks = text.match(/Track\\s*\"[^\"]*\"\\s*\\{[^}]*\\}/g) || [];\n\n  for (const trackBlock of trackBlocks) {\n    if (!trackBlock.includes(\"Instrument\")) {\n      const trackIndex = text.indexOf(trackBlock);\n      const instrumentIndex = trackIndex + trackBlock.indexOf(\"}\");\n      const startPosition =\n        vscode.window.activeTextEditor?.document.positionAt(trackIndex);\n      const endPosition =\n        vscode.window.activeTextEditor?.document.positionAt(instrumentIndex);\n      const range = new vscode.Range(startPosition!, endPosition!);\n      const diagnostic = new vscode.Diagnostic(\n        range,\n        `Le mot-clé Instrument est manquant dans le bloc Track.`,\n        vscode.DiagnosticSeverity.Error\n      );\n      diagnostics.push(diagnostic);\n    }\n  }\n\n  // Vérifier la signature temporelle\n  const timeSignatureMatch = text.match(/TimeSignature\\s*(\\d+\\/\\d+)/);\n  if (!timeSignatureMatch) {\n    const timeSignatureIndex = text.indexOf(\"TimeSignature\");\n    const startPosition =\n      vscode.window.activeTextEditor?.document.positionAt(timeSignatureIndex);\n    const endPosition = vscode.window.activeTextEditor?.document.positionAt(\n      timeSignatureIndex + \"TimeSignature\".length\n    );\n    const range = new vscode.Range(startPosition!, endPosition!);\n    const diagnostic = new vscode.Diagnostic(\n      range,\n      `La signature temporelle après TimeSignature est manquante ou invalide.`,\n      vscode.DiagnosticSeverity.Error\n    );\n    diagnostics.push(diagnostic);\n  }\n\n  // Vérifier les valeurs de Tempo et Ticks\n  const tempoMatch = text.match(/Tempo\\s*(\\d+)/);\n  const ticksMatch = text.match(/Ticks\\s*(\\d+)/);\n  if (!tempoMatch || isNaN(Number(tempoMatch[1]))) {\n    const tempoIndex = text.indexOf(\"Tempo\");\n    const startPosition =\n      vscode.window.activeTextEditor?.document.positionAt(tempoIndex);\n    const endPosition = vscode.window.activeTextEditor?.document.positionAt(\n      tempoIndex + \"Tempo\".length\n    );\n    const range = new vscode.Range(startPosition!, endPosition!);\n    const diagnostic = new vscode.Diagnostic(\n      range,\n      `La valeur de Tempo n'est pas un nombre valide.`,\n      vscode.DiagnosticSeverity.Error\n    );\n    diagnostics.push(diagnostic);\n  }\n  if (!ticksMatch || isNaN(Number(ticksMatch[1]))) {\n    const ticksIndex = text.indexOf(\"Ticks\");\n    const startPosition =\n      vscode.window.activeTextEditor?.document.positionAt(ticksIndex);\n    const endPosition = vscode.window.activeTextEditor?.document.positionAt(\n      ticksIndex + \"Ticks\".length\n    );\n    const range = new vscode.Range(startPosition!, endPosition!);\n    const diagnostic = new vscode.Diagnostic(\n      range,\n      `La valeur de Ticks n'est pas un nombre valide.`,\n      vscode.DiagnosticSeverity.Error\n    );\n    diagnostics.push(diagnostic);\n  }\n\n  return diagnostics;\n}\n\nfunction showErrorsInEditor(\n  editor: vscode.TextEditor,\n  diagnostics: vscode.Diagnostic[]\n) {\n  if (decorationType) {\n    decorationType.dispose();\n  }\n\n  decorationType = vscode.window.createTextEditorDecorationType({\n    textDecoration: \"underline wavy red\",\n  });\n\n  const ranges = diagnostics.map((diagnostic) => diagnostic.range);\n  editor.setDecorations(decorationType, ranges);\n\n  diagnosticsCollection.set(editor.document.uri, diagnostics);\n}\n\nfunction openHtmlKeyboardPage(htmlFilePath: string) {\n    const panel = vscode.window.createWebviewPanel(\n        \"htmlPreview\", // Identifiant du panel\n        \"Aperçu HTML\", // Titre du panel\n        vscode.ViewColumn.One, // Montre le nouveau panel dans cette colonne\n        {\n            // Autoriser les scripts dans la vue Web\n            enableScripts: true,\n            // Autoriser l'accès aux ressources locales\n            localResourceRoots: [vscode.Uri.file(path.dirname(htmlFilePath))]\n        }\n    );\n\n    let htmlContent = fs.readFileSync(htmlFilePath, \"utf8\");\n\n    // Remplacer les URL des ressources locales par des URL de vue Web\n\n    const assetDir = path.join(path.dirname(htmlFilePath), 'assets/');\n    const assetUri = panel.webview.asWebviewUri(vscode.Uri.file(assetDir));\n    htmlContent = htmlContent.replace(/assets\\//g, assetUri.toString());\n\n    panel.webview.html = htmlContent;\n}\n\nexport function deactivate() {}\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(112);\n"],"names":["decorationType","diagnosticsCollection","vscode","languages","createDiagnosticCollection","async","analyzeCode","activeEditor","window","activeTextEditor","errors","text","diagnostics","missingKeywords","keyword","RegExp","test","tracksIndex","indexOf","startPosition","document","positionAt","endPosition","range","Range","diagnostic","Diagnostic","DiagnosticSeverity","Error","push","trackBlocks","match","trackBlock","includes","trackIndex","instrumentIndex","timeSignatureIndex","tempoMatch","ticksMatch","isNaN","Number","tempoIndex","ticksIndex","analyzeForErrors","getText","length","editor","dispose","createTextEditorDecorationType","textDecoration","ranges","map","setDecorations","set","uri","showErrorsInEditor","clear","context","disposable","commands","registerCommand","changeDisposable","workspace","onDidChangeTextDocument","e","languageId","htmlFilePath","panel","createWebviewPanel","ViewColumn","One","enableScripts","localResourceRoots","Uri","file","dirname","htmlContent","fs","readFileSync","assetDir","join","assetUri","webview","asWebviewUri","replace","toString","html","openHtmlKeyboardPage","fileName","split","subscriptions","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}